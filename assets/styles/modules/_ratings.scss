////
/// Star Rating
/// @group components
/// @author MS
////

///
$rating-type: clickable !default;
///
$rating-color-empty: #ccc !default;
///
$rating-color-full: gold !default;
///
$rating-color-hover: grey !default;
///
$rating-star-spacing: 3px !default;
///
$rating-values: (
   '0.25', '0.50', '0.75', '1.00',
   '1.25', '1.50', '1.75', '2.00',
   '2.25', '2.50', '2.75', '3.00',
   '3.25', '3.50', '3.75', '4.00',
   '4.25', '4.50', '4.75', '5.00'
 );
///
$rating-icon-names: (
  'quarter': '.icon-star-quarter',
  'half': '.icon-star-half',
  'three-quarters': '.icon-star-three-quarters',
  'full': '.icon-star-full'
);

/// This is a CSS-only star rating component that shows the proper rating depending on a data-attribute value. JS logic behing this component should round up values per quarter.
/// @param {string} $rating-type [clickable] - Indicates if whether this component should be clickable or representative. Accepted values: `clickable` or `representative`.
/// @example markup
///   <div class="c-rating" data-rating-value="3.25">
///     <button></button>
///     <button></button>
///     <button></button>
///     <button></button>
///     <button></button>
///   </div>

@mixin c-rating($type: $rating-type) {
  @if not index(clickable representative, $type) {
    @error "Type must be either `clickable` or `representative`.";
  }

  .c-rating {
    @include clearfix();

    display: inline-block;

    @if $type == representative {
      pointer-events: none;
    }

    button {
      @extend .ms-icon;
      @extend #{map-get($rating-icon-names, 'full')};

      position: relative;
      float: left;
      padding: 0 $rating-star-spacing;
      font-size: toem(16px);
      color: $rating-color-empty;
      background-color: transparent;
      border: none;
      transition: color $msuxf-transition-duration $msuxf-transition-timing;

      &:first-child {
        margin-left: 0;
      }

      @if $type == clickable {
        &:hover,
        &:hover~button {
          color: $rating-color-empty !important;

          &:after {
            color: $rating-color-empty !important;
          }
        }
      }
    }

    @if $type == clickable {
      &:hover {
        button {
          color: $rating-color-hover !important;
          transition: none;

          &:after {
            color: $rating-color-hover !important;
          }
        }
      }
    }

    @each $rating-value in $rating-values {
      // Get the next higher integer.
      $rating-value-ceil: ceil(to-number($rating-value));
      &[data-rating-value="#{unquote($rating-value)}"] {
        button:nth-child(-n+#{$rating-value-ceil}) {
          color: $rating-color-full;
        }

        button:nth-child(#{$rating-value-ceil}) {
          @if explode($rating-value, '.') == '.25' {
            @extend #{map-get($rating-icon-names, 'quarter')};
          }
          @else if explode($rating-value, '.') == '.50' {
            @extend #{map-get($rating-icon-names, 'half')};
          }
          @else if explode($rating-value, '.') == '.75' {
            @extend #{map-get($rating-icon-names, 'three-quarters')};
          }

          &:before {
            position: relative;
            z-index: 1;
          }

          &:after {
            @extend .icon-star-full:before;

            position: absolute;
            left: $rating-star-spacing;
            z-index: 0;
            color: $rating-color-empty;
          }
        }
      }
    }
  }
}